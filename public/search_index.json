[
["index.html", "Se former au logiciel R : initiation et perfectionnement 1 Remerciements", " Se former au logiciel R : initiation et perfectionnement François Rebaudo 2018-06-26 1 Remerciements Je remercie tous les contributeurs qui ont participé à améliorer ce livre par leurs conseils, leurs suggestions de modifications et leurs corrections : =&gt; liste à mettre à jour à la publication Les versions gitbook, html et epub de ce livre utilisent les icônes open source du projet Font Awesome (https://fontawesome.com). La version PDF utilise les icônes issus du projet Tango disponibles depuis openclipart (https://openclipart.org/). Ce livre a été écrit avec le package R bookdown (https://bookdown.org/). Le code source est disponible sur GitHub (https://github.com/frareb/myRBook_FR). La compilation utilise Travis CI (https://travis-ci.org). La version en ligne est hébergée et mise à jour grâce à Netlify (http://myrbookfr.netlify.com/). "],
["licence.html", " 2 Licence", " 2 Licence Licence Creative Commons Attribution - Pas d’Utilisation Commerciale - Pas de Modification 3.0 France (CC BY-NC-ND 3.0 FR ; https://creativecommons.org/licenses/by-nc-nd/3.0/fr/) C’est un résumé (et non pas un substitut) de la licence. Vous êtes autorisé à : Partager — copier, distribuer et communiquer le matériel par tous moyens et sous tous formats. L’Offrant ne peut retirer les autorisations concédées par la licence tant que vous appliquez les termes de cette licence. Selon les conditions suivantes : Attribution — Vous devez créditer l’Œuvre, intégrer un lien vers la licence et indiquer si des modifications ont été effectuées à l’Oeuvre. Vous devez indiquer ces informations par tous les moyens raisonnables, sans toutefois suggérer que l’Offrant vous soutient ou soutient la façon dont vous avez utilisé son Oeuvre. Pas d’Utilisation Commerciale — Vous n’êtes pas autorisé à faire un usage commercial de cette Oeuvre, tout ou partie du matériel la composant. Pas de modifications — Dans le cas où vous effectuez un remix, que vous transformez, ou créez à partir du matériel composant l’Oeuvre originale, vous n’êtes pas autorisé à distribuer ou mettre à disposition l’Oeuvre modifiée. Pas de restrictions complémentaires — Vous n’êtes pas autorisé à appliquer des conditions légales ou des mesures techniques qui restreindraient légalement autrui à utiliser l’Oeuvre dans les conditions décrites par la licence. Notes : Vous n’êtes pas dans l’obligation de respecter la licence pour les éléments ou matériel appartenant au domaine public ou dans le cas où l’utilisation que vous souhaitez faire est couverte par une exception. Aucune garantie n’est donnée. Il se peut que la licence ne vous donne pas toutes les permissions nécessaires pour votre utilisation. Par exemple, certains droits comme les droits moraux, le droit des données personnelles et le droit à l’image sont susceptibles de limiter votre utilisation. "],
["intro.html", " 3 Introduction 3.1 Pourquoi se former à R 3.2 Ce livre 3.3 Lectures complémentaires en français", " 3 Introduction 3.1 Pourquoi se former à R manipuler ses données statistiques et nombreux packages disponibles communauté d’utilisateurs graphiques de qualité transparence scientifique et reproductibilité des résultats 3.2 Ce livre L’objectif de ce livre est de fournir aux étudiants et aux personnes souhaitant s’initier à R une base solide pour ensuite mettre en oeuvre leurs propres projets scientifiques et la valorisation de leurs résultats. Il existe de nombreux livres dédiés à R, mais aucun ne couvre les éléments de base de ce language dans un objectif de rendre les résultats scientifiques publiables et reproductibles. De manière générale ce livre s’adresse à toute la communauté scientifique et en particulier à celle intéressée par les sciences du vivant, et les nombreux exemples de ce livre s’appuieront sur des études en agronomie et en écologie. initiation aux bases de R : pour tous ! perfectionnement en français contrairement à d’autres livres, importance de la lisibilité du code, des standrads, orientation recherche “outil pour le scientifique” 3.3 Lectures complémentaires en français R pour les débutants, Emmanuel Paradis (https://cran.r-project.org/doc/contrib/Paradis-rdebuts_fr.pdf) Introduction à la programmation avec R, Vincent Goulet (https://cran.r-project.org/doc/contrib/Goulet_introduction_programmation_R.pdf) "],
["premiersPas.html", " 4 Premiers pas 4.1 Installation de R 4.2 R comme calculatrice 4.3 La notion d’objet 4.4 Les scripts", " 4 Premiers pas 4.1 Installation de R Le programme permettant l’installation du logiciel R peut être téléchargé depuis le site web de R : https://www.r-project.org/. Sur le site de R il faut au préalable choisir un mirroir CRAN (serveur depuis lequel télécharger R ; sauf cas particulier le plus proche de sa localisation géographique), puis télécharger le fichier base. Les utilisateurs de Linux pourront préférer un sudo apt-get install r-base. Le logiciel R peut être téléchargé depuis de nombreux serveurs du CRAN (Comprehensive R Archive Network) à travers le monde. Ces serveurs s’appellent des miroirs. Le choix du miroir est manuel. Les informations complémentaires comme cette note seront toujours représentées avec ce pictogramme information. 4.2 R comme calculatrice Une fois le programme lancé, une fenêtre apparaît dont l’aspect peut varier en fonction de votre système d’exploitation (Figure 4.1). Cette fenêtre est dénommée la console. Figure 4.1: Capture d’écran de la console R sous Windows. La console correspond à l’interface où va être interprété le code, c’est à dire à l’endroit où le code va être transformé en langage machine, éxécuter par l’ordinateur, puis retransmis sous une forme lisible par des humains. Cela correspond à l’écran d’affichage d’une calculatrice. C’est de cette manière que R va être utilisé dans la suite de cette section. 5 + 5 ## [1] 10 Si nous écrivons 5 + 5 dans la console puis Entrée, le résultat apparaît précédé du chiffre [1] entre crochets. Ce chiffre correspond au numéro du résultat (dans notre cas, il n’y a qu’un seul résultat ; nous reviendrons sur cet aspect plus tard). Nous pouvons également noter dans cet exemple l’utilisation d’espaces avant et après le signe +. Ces espaces ne sont pas nécessaires mais permettent au code d’être plus lisible par les humains (i.e., plus agréable à lire pour nous comme pour les personnes avec qui nous serons amenés à partager notre code). Les opérateurs aritmétiques disponibles sous R sont résumés dans la table 4.1. Table 4.1: Opérateurs arithmétiques. Label Operateur Addition + Soustraction - Multiplication * Division / Puissance ^ Modulo %% Quotien Décimal %/% Classiquement, les multiplications et les divisions sont prioritaires sur les additions et les soustractions. Au besoin nous pouvons utiliser des parenthèses. 5 + 5 * 2 ## [1] 15 (5 + 5) * 2 ## [1] 20 L’opérateur modulo correspond au reste de la division euclidienne. Il est souvent utilisé en informatique par exemple pour savoir si un nombre est pair ou impair (un nombre modulo 2 va renvoyer 1 si il est impair et 0 si il est pair). 451 %% 2 ## [1] 1 288 %% 2 ## [1] 0 (5 + 5 * 2) %% 2 ## [1] 1 ((5 + 5) * 2) %% 2 ## [1] 0 R intègre également certaines constantes dont pi. Par ailleurs le signe infini est représenté par Inf pi ## [1] 3.141593 pi * 5^2 ## [1] 78.53982 1/0 ## [1] Inf le style du code est important car le code est destiné à être lisible par nous plus tard et par d’autres personnes de manière générale. Pour avoir un style lisible il est recommandé de mettre des espaces avant et après les opérateurs arithmétiques. Les informations concernant le style seront toujours représentées avec ce pictogramme afin qu’elles soient facilement identifiables. 4.3 La notion d’objet Un aspect important de la programmation avec R, mais aussi de la programmation en général est la notion d’objet. Comme indiqué sur la page web de wikipedia (https://fr.wikipedia.org/wiki/Objet_(informatique)), en informatique, un objet est un conteneur, c’est à dire quelque chose qui va contenir de l’information. L’inforamtion contenue dans un objet peut être très diverse, mais pour le moment nous allons contenir dans un objet le chiffre 5. Pour ce faire (et pour pouvoir le réutiliser par la suite), il nous faut donner un nom à notre objet. Avec R le nom des objets ne doit pas comprendre de caractères spéciaux comme ^$?|+()[]}{, ne doit pas commencer par un chiffre ni contenir d’espaces. Le nom de l’objet doit être représentatif de ce qu’il contient, tout en étant ni trop court ni trop long. Imaginons que notre chiffre 5 corresponde au nombre de répétitions d’une expérience. Nous voudrions lui donner un nom faisant référence à nombre et à répétition, que nous pourrions réduire à nbr et rep, respectivement. Il existe plusieurs possibilités qui sont toutes assez répandues sous R : la séparation au moyen du caractère tiret bas : nbr_rep la séparation au moyen du caractère point : nbr.rep l’utilisation de lettres minuscules : nbrrep le style lowerCamelCase consistant en un premier mot en minuscules et des suivants avec une majuscule : nbrRep le style UpperCamelCase consistant à mettre une majuscule au début de chacun des mots : NbrRep Toutes ces formes de nommer un objet sont équivalentes. Dans ce livre nous utiliserons le style lowerCamelCase. De manière générale il faut éviter les noms trop longs comme leNombreDeRepetitions ou trop courts comme nR, et les noms ne permettant pas d’identifier le contenu comme maVariable ou monChiffre, mais aussi a ou b… Il existe différentes façons de définir un nom pour les objets que nous allons créer avec R. Dans ce livre il est utilisé le style lowerCamelCase. L’important n’est pas le choix du style mais la consistence dans son choix. L’objectif est d’avoir un code fonctionnel mais également un code facile et agréable à lire. Maintenant que nous avons choisi un nom pour notre objet, il faut le créer et faire comprendre à R que notre objet doit contenir le chiffre 5. Il existe trois façons de créer un objet sous R: avec le signe &lt;- avec le signe = avec le signe -&gt; nbrRep &lt;- 5 nbrRep = 5 5 -&gt; nbrRep Dans ce livre nous utiliserons toujours la forme &lt;- par souci de consistence et aussi parce que c’est la forme la plus répendue. nbrRep &lt;- 5 Nous venons de créer un objet nbrRep et de lui affecter la valeur 5. Cet objet est désormais disponible dans notre environnement de calcul et peut donc être utilisé. Voici quelques exemples : nbrRep + 2 ## [1] 7 nbrRep * 5 - 45/56 ## [1] 24.19643 pi * nbrRep^2 ## [1] 78.53982 La valeur associée à notre objet nbrRep peut être modifiée de la même manière que lors de sa création : nbrRep &lt;- 5 nbrRep + 2 ## [1] 7 nbrRep &lt;- 10 nbrRep + 2 ## [1] 12 nbrRep &lt;- 5 * 2 + 7/3 nbrRep + 2 ## [1] 14.33333 L’utilisation des objets prend tout son sens lorsque nous avons des opérations complexes à réaliser et rend le code plus agréable à lire et à comprendre. (5 + 9^2 - 1/18) / (32 * 45/8 + 3) ## [1] 0.4696418 terme01 &lt;- 5 + 9^2 - 1/18 terme02 &lt;- 32 * 45/8 + 3 terme01 / terme02 ## [1] 0.4696418 4.4 Les scripts R est un langage de programmation souvent dénommé langage de script. Cela fait référence au fait que la plupart des utilisateurs vont écrire des petits bouts de code plutôt que des programmes entiers. R peut être utilisé comme une simple calculatrice, et dans ce cas il ne sera pas nécessaire de conserver un historique des opérations qui ont été réalisées. Mais si les opérations à réliser sont longues et complexes, il peut devenir nécessaire de pouvoir sauvegarder ce qui a été fait à un moment donné pour pouvoir poursuivre plus tard. Le fichier dans lequel seront conservées les opérations consitue ce que l’on appelle communement le script. Un script est donc un fichier contenant une succession d’informations compréhensibles par R et qu’il est possible d’éxécuter. 4.4.1 Créer un script et le documenter Pour ouvrir un nouveau script il suffit de créer un fichier texte vide qui sera édité par un éditeur de texte comme le bloc note sous Windows ou Mac OS, ou encore Gedit ou même nano sous Linux. Par convention ce fichier prend l’extension “.r” ou plus souvent “.R”. C’est cette dernière convention qui sera utilisée dans ce livre. Depuis l’interface graphique de R il est possible de créer un nouveux script sous Mac OS et Windows via fichier puis nouveau script et enregistrer sous. Tout comme le nom des objets, le nom du script est important pour que nous puissions facilement identifier son contenu. Par exemple nous pourrions créer un fichier formRConceptsBase.R contenant les objets que nous venons de créer et les calculs effectués. Mais même avec des noms de variables et un nom de fichier bien définis, il sera difficile de se rappeler le sens de cce fichier sans une documentation accompagnant ce script. Pour docummenter un script nous allons utiliser des commentaires. Les commentaires sont des éléments qui seront identifiés par R comme tel et qui ne seront pas éxécutés. Pour spécifier à R que nous allons faire un commentaire, il faut utiliser le caractère octothorpe (croisillon) #. Les commentaires peuvent être insérés sur une nouvelle ligne ou en fin de ligne. # creation objet nombre de repetitions nbrRep &lt;- 5 # commentaire de fin de ligne Les commentaires peuvent aussi être utilisé pour qu’une ligne ne soit plus éxécutée. nbrRep &lt;- 5 # nbrRep + 5 Pour en revenir à la documentation du script, il est recommandé de commencer chacun de ses scripts par une brève description de son contenu, puis lorsque le script devient long, de le structurer en différentes parties pour faciliter sa lecture. # ------------------------------------------------------------ # Voici un script pour acquérir les concepts de base # avec R # date de création : 25/06/2018 # auteur : François Rebaudo # ------------------------------------------------------------ # [1] création de l&#39;objet nombre de répétitions # ------------------------------------------------------------ nbrRep &lt;- 5 # [2] calculs simples # ------------------------------------------------------------ pi * nbrRep^2 ## [1] 78.53982 Pour aller plus loin sur le style de code, un guide complet de recommandations est disponible en ligne (en anglais ; http://style.tidyverse.org/). 4.4.2 Exécuter un script Depuis que nous avons un script, nous ne travaillons plus directement dans la console. Or seule la console est capable d’interpérter le code R et de nous renvoyer les résultats que nous souhaitons obtenir. Pour l’instant la technique la plus simple consiste à copier-coller les lignes que nous souhaitons éxécuter depuis notre script vers la console. A partir de maintenant nous n’allons plus utiliser les éditeurs de texte comme le bloc note mais des éditeurs spécialisés pour la confection de scripts R. C’est l’objet du chapitre suivant. "],
["IDE.html", " 5 Choisir un environnement de développement 5.1 Editeurs de texte et environnement de développement 5.2 RStudio 5.3 Notepad++ avec Npp2R 5.4 Geany 5.5 Autres solutions", " 5 Choisir un environnement de développement 5.1 Editeurs de texte et environnement de développement Il existe de très nombreux éditeurs de texte, le chapitre précédent a permit d’en introduire quelque uns parmis les plus simples comme le bloc note de Windows ou nano sous Linux. Rapidement les limites de ces éditeurs ont rendu la tâche d’écrire un script fastidieuse. 5.2 RStudio XXX 5.3 Notepad++ avec Npp2R XXX 5.4 Geany XXX 5.5 Autres solutions XXX "],
["dataType1.html", " 6 Les types de données 6.1 Le type numeric 6.2 Le type character 6.3 Le type factor 6.4 Le type logical 6.5 Un point sur NA et NULL 6.6 Les opérateurs conditionnels", " 6 Les types de données 6.1 Le type numeric XXXfloat et intger 6.2 Le type character XXXstring 6.3 Le type factor XXXstring 6.4 Le type logical XXXboolean 6.5 Un point sur NA et NULL XXX 6.6 Les opérateurs conditionnels XXX "],
["dataType2.html", " 7 Les conteneurs de données 7.1 Le conteneur vector 7.2 Le conteneur list 7.3 Le conteneur data.frame 7.4 Le conteneur matrix 7.5 Le conteneur array", " 7 Les conteneurs de données 7.1 Le conteneur vector XXX 7.2 Le conteneur list XXX 7.3 Le conteneur data.frame XXX 7.4 Le conteneur matrix XXX 7.5 Le conteneur array XXX "],
["fonctions.html", " 8 Les fonctions 8.1 Quest-ce qu’une fonction 8.2 Les fonctions les plus courantes 8.3 Autres fonctions utiles 8.4 Ecrire une fonction", " 8 Les fonctions 8.1 Quest-ce qu’une fonction XXX 8.2 Les fonctions les plus courantes 8.2.1 Visualiser les données str head tail class 8.2.2 fonctions mathématiques exp sqrt 8.2.3 Statistiques descriptives mean sd max min quartile summary meadian 8.3 Autres fonctions utiles XXX 8.4 Ecrire une fonction XXX "],
["import.html", " 9 Importer et exporter des données 9.1 Lire des données depuis un fichier tableur 9.2 Sauver des données pour R 9.3 Exporter des données", " 9 Importer et exporter des données 9.1 Lire des données depuis un fichier tableur XXX 9.2 Sauver des données pour R save load 9.3 Exporter des données write XXX "],
["loops.html", " 10 Les boucles 10.1 Pourquoi faire des boucles 10.2 La boucle if 10.3 La boucle switch 10.4 La boucle for 10.5 La boucle while 10.6 repeat, next, break, stop 10.7 Les boucles de la famille apply", " 10 Les boucles 10.1 Pourquoi faire des boucles XXX un peu d’algo 10.2 La boucle if XXX 10.3 La boucle switch XXX 10.4 La boucle for XXX 10.5 La boucle while XXX 10.6 repeat, next, break, stop XXX 10.7 Les boucles de la famille apply 10.7.1 apply XXX 10.7.2 sapply XXX 10.7.3 lapply XXX 10.7.4 tapply XXX 10.7.5 mapply XXX "]
]
